#!/bin/sh

# Efficiently sync git-controlled source with a remote server.

set -e

if [ $# -ne 1 ]; then
   echo "Usage: $0 HOST" >&2
   exit 1
fi

remote=$1

topdir="$(git rev-parse --show-toplevel)"
[ -z "$topdir" ] && exit 1

rel_topdir=${topdir#$HOME/}
local_head=$(git rev-parse HEAD)

loc2rem=/tmp/gitsync$$-loc2rem
rem2loc=/tmp/gitsync$$-rem2loc
bundle=/tmp/gitsync$$-bundle
trap "rm -f $loc2rem $rem2loc $bundle" EXIT

mkfifo $loc2rem $rem2loc

ssh "$remote" '
set -e
rel_topdir='\'"$rel_topdir"\''
remote='\'"$remote"\''
if ! [ -d "$rel_topdir" ]; then
  echo "Missing $rel_topdir on $remote" >&2
  exit 1
fi
cd "$rel_topdir"
git rev-parse HEAD
git rev-list @{u}^..HEAD | tr "\n" " "; echo
read b64_bundle
if [ -n "$b64_bundle" ]; then
  echo "$b64_bundle" | base64 -d > /tmp/gitsync$$-fetch
  git fetch -q /tmp/gitsync$$-fetch
  rm /tmp/gitsync$$-fetch
fi
read new_head
echo "Resetting $remote:$rel_topdir to $(git rev-parse --short $new_head)" >&2
git reset --hard $new_head
read b64_diff
if [ -n "$b64_diff" ]; then
  echo "Applying uncommitted:" >&2
  echo "$b64_diff" | base64 -d | git apply --stat --apply >&2
fi
' >$rem2loc <$loc2rem &

exec <$rem2loc >$loc2rem

read remote_head
if [ -z "$remote_head" ]; then
    # ssh exited, something went wrong
    exit 1
fi
#echo "got remote_head: $remote_head" >&2
read remote_revs
#echo "got remote_revs: $remote_revs" >&2

if [ "$remote_head" != "$local_head" ]; then
    for rev in $remote_revs; do
        if [ "$(git merge-base HEAD $rev 2>/dev/null)" = $rev ]; then
            remote_base=$rev
            break
        fi
    done
    if [ -z "$remote_base" ]; then
        echo "$0: cannot find familiar commit among $remote_revs; try git pull locally" >&2
        exit 1
    fi
else
    remote_base=$local_head
fi

# "git bundle" refuses to create an empty bundle, so we must check
if [ "$remote_base" != $local_head ]; then
    echo "sending $(git rev-parse --short $remote_base)..$(git rev-parse --short HEAD)" >&2
    git bundle create $bundle $remote_base..HEAD 2>/dev/null
    cat $bundle | base64 -w0
    echo
else
    # provide newline to the remote, so it can receive the empty line and skip
    # "git fetch"
    echo
fi

git rev-parse HEAD
# use "git diff HEAD" to also catch staged differences
git diff --binary HEAD | base64 -w0
echo

wait
