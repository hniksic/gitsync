#!/bin/sh

# Efficiently sync git-controlled source with a remote server.
#
# Uploads both committed and uncommitted data (in files known to git)
# to the remote host, doing so as efficiently as possible.  git bundle
# is used to upload local commits, and all data is transferred in a
# single ssh invocation.  After running the script, the commit and the
# working tree on the remote side match the local ones.
#
# The remote host must contain a checkout of the repository in the
# same location under your $HOME.  For example, if you are working in
# $HOME/work/repo locally, you must have a "work/repo" on the server.
#
# Usage from Emacs:
#
# (defun sync-git (hostname)
#   (save-some-buffers)
#   (message "Syncing %s..."
#            (string-trim
#             (shell-command-to-string
#              "git rev-parse --show-toplevel")))
#   (shell-command (format "gitsync %s" hostname)))
#
# (global-set-key "\C-\M-u"
#                 (lambda ()
#                   (interactive)
#                   (sync-git "jump+megalodon-int-dev.node")))

set -e

if [ $# -ne 1 ]; then
   echo "Usage: $0 HOST" >&2
   exit 1
fi

REMOTE=$1

cd "$(git rev-parse --show-toplevel || echo /-nosuchdirectory-)"
GITDIR=${PWD#$HOME/}

# we need two named pipes: local-to-remote and remote-to-local
loc2rem=/tmp/comm$$-loc2rem
rem2loc=/tmp/comm$$-rem2loc
trap "rm -f $loc2rem $rem2loc" EXIT

mkfifo $loc2rem $rem2loc

ssh $REMOTE '
cd '\'"$GITDIR"\'' && \
git rev-parse @{u} && \
read bundle && \
echo "$bundle" | base64 -d > /tmp/git$$ && \
git fetch -q /tmp/git$$ && \
git log --oneline @{u}..FETCH_HEAD >&2 && \
git reset --hard FETCH_HEAD >&2 && \
rm /tmp/git$$ && \
read diff && \
[ -n "$diff" ] && echo "$diff" | base64 -d | git apply -v
' >$rem2loc <$loc2rem &

exec <$rem2loc >$loc2rem

read remote_origin
if [ -z "$remote_origin" ]; then
   # ssh exited, something went wrong
   exit 1
fi
#echo "got remote_origin: $remote_origin" >&2
common_base=$(git merge-base HEAD $remote_origin)
if [ -z "$common_base" ]; then
   exit 1
fi

git bundle create - $common_base.. 2>/dev/null | base64 -w0
echo
# use "git diff HEAD" to also catch staged differences
git diff --binary HEAD | base64 -w0
echo

wait
